# Nginx Security Headers Configuration for VISUAL Platform
# Path: infra/nginx/security_headers.conf
# Include in your server block: include /etc/nginx/conf.d/security_headers.conf;

# === STRICT TRANSPORT SECURITY (HSTS) ===
# Forces HTTPS connections for enhanced security
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# === CONTENT SECURITY POLICY (CSP) ===
# Comprehensive CSP for VISUAL platform with media support
set $csp_default "default-src 'self'";
set $csp_connect "connect-src 'self' https: wss: https://*.stripe.com https://*.sentry.io";
set $csp_img     "img-src 'self' data: https: blob: https://*.googleapis.com";
set $csp_media   "media-src 'self' https: data: blob: https://*.bunnycdn.com";
set $csp_script  "script-src 'self' 'unsafe-inline' 'unsafe-eval' https: https://js.stripe.com";
set $csp_style   "style-src 'self' 'unsafe-inline' https: https://fonts.googleapis.com";
set $csp_font    "font-src 'self' data: https: https://fonts.gstatic.com";
set $csp_frame   "frame-ancestors 'none'";
set $csp_base    "base-uri 'self'";
set $csp_form    "form-action 'self' https:";
set $csp_object  "object-src 'none'";
add_header Content-Security-Policy "$csp_default; $csp_connect; $csp_img; $csp_media; $csp_script; $csp_style; $csp_font; $csp_frame; $csp_base; $csp_form; $csp_object" always;

# === CONTENT TYPE PROTECTION ===
# Prevents MIME type sniffing attacks
add_header X-Content-Type-Options nosniff always;

# === CLICKJACKING PROTECTION ===
# Prevents embedding in frames/iframes
add_header X-Frame-Options DENY always;

# === REFERRER POLICY ===
# Controls referrer information sent to external sites
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# === PERMISSIONS POLICY ===
# Restricts browser features and APIs access
add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()" always;

# === CUSTOM SECURITY HEADERS ===
# Additional security headers for enhanced protection
add_header X-Robots-Tag "index, follow" always;
add_header X-Permitted-Cross-Domain-Policies "none" always;

# === CORS CONFIGURATION (for API routes) ===
# Configure as needed for your frontend-backend communication
location /api/ {
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
    add_header Access-Control-Expose-Headers "X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset" always;
    add_header Access-Control-Allow-Credentials "true" always;
    
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Max-Age 86400;
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
    }
}

# === STATIC ASSETS OPTIMIZATION ===
# Caching and security for static files
location ~* \.(css|js|jpg|jpeg|png|webp|svg|ico|pdf|mp4|webm)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept-Encoding";
    
    # Security headers for static assets
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
}

# === HEALTH ENDPOINTS SECURITY ===
# Special configuration for monitoring endpoints
location = /healthz {
    # Public health check - minimal headers
    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    add_header X-Content-Type-Options nosniff always;
}

location ~ ^/(readyz|metrics|status)$ {
    # Protected monitoring endpoints
    allow 127.0.0.1;
    allow ::1;
    # Add your monitoring server IPs here
    # allow 10.0.0.0/8;
    deny all;
    
    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    add_header X-Content-Type-Options nosniff always;
}
